{
  "version": 3,
  "sources": ["../../../javascript/atomic_lti/lib/init.js", "../../../javascript/atomic_lti/init_app.js"],
  "sourcesContent": ["function showError() {\n  document.getElementById('error').classList.remove('hidden');\n}\n\nfunction showLaunchNewWindow() {\n  document.getElementById(\"launch_new_window\").classList.remove(\"hidden\");\n}\n\nfunction showCookieError() {\n  document.getElementById('cookie_error').classList.remove('hidden');\n}\n\nfunction showRequestStorageAccess() {\n  document.getElementById('request_storage_access').classList.remove('hidden');\n}\n\nfunction showRequestStorageError() {\n  document.getElementById('request_storage_access_error').classList.remove('hidden');\n  document.getElementById('request_storage_access').classList.add('hidden');\n}\n\nexport function launchNewWindow(settings) {\n  window.open(settings.relaunch_init_url);\n  document.getElementById('button_launch_new_window').disabled = true;\n  document.getElementById('request_storage_access').classList.add('hidden');\n  document.getElementById('request_storage_access_error').classList.add('hidden');\n}\n\nfunction storeCsrf(state, csrf_token, storage_params) {\n  return new Promise((resolve, reject) => {\n    let platformOrigin = new URL(storage_params.oidc_url).origin;\n    let frameName = storage_params.target;\n    let parent = window.parent || window.opener;\n    let targetFrame = frameName === \"_parent\" ? parent : parent.frames[frameName];\n\n    if (storage_params.origin_support_broken) {\n      // The spec requires that the message's target origin be set to the platform's OIDC Authorization url\n      // but Canvas does not yet support this, so we have to use '*'.\n      platformOrigin = '*'\n    }\n\n    let timeout = setTimeout(() => {\n      console.log(\"postMessage timeout\");\n      reject(new Error('Timeout while waiting for platform response'));\n    }, 2000);\n\n    let receiveMessage = (event) => {\n        if (typeof event.data === \"object\" &&\n            event.data.subject === \"lti.put_data.response\" &&\n            event.data.message_id === state &&\n            (event.origin === platformOrigin || platformOrigin === \"*\")) {\n\n          removeEventListener('message', receiveMessage);\n          clearTimeout(timeout);\n\n          if (event.data.error) {\n              // handle errors\n              console.log(event.data.error.code)\n              console.log(event.data.error.message)\n              reject(new Error(event.data.errormessage));\n          }\n          resolve();\n        }\n    };\n\n    window.addEventListener('message', receiveMessage);\n    targetFrame.postMessage({\n            \"subject\": \"lti.put_data\",\n            \"message_id\": state,\n            \"key\": \"atomic_lti_\" + state,\n            \"value\": csrf_token\n          } , platformOrigin );\n\n    // Platform should post a message back\n\n  });\n}\n\nexport function tryRequestStorageAccess(settings) {\n  document.requestStorageAccess()\n    .then(() => {\n      // We should have cookies now\n      setCookie(settings);\n      window.location.replace(settings.response_url);\n    })\n    .catch((e) => {\n      console.log(e);\n      showRequestStorageError();\n    });\n}\n\nasync function checkForStorageAccess() {\n  try {\n    return await document.hasStorageAccess();\n  } catch(e) {\n    return false;\n  }\n}\n\nfunction hasCookie(settings) {\n  return document.cookie.match('(^|;)\\\\s*open_id_' + settings.state);\n}\n\nfunction setCookie(settings) {\n  document.cookie = 'open_id_' + settings.state +'=' + settings.csrf_token + '; path=/; max-age=300; SameSite=None ;'\n}\n\nfunction hasStorageAccessAPI() {\n  return typeof document.hasStorageAccess === 'function'\n    && typeof document.requestStorageAccess === 'function';\n}\n\nexport async function doLtiStorageLaunch(settings) {\n  let submitToPlatform = () => { window.location.replace(settings.response_url) };\n\n  if (hasCookie(settings)) {\n    // We have cookies\n    return submitToPlatform();\n  }\n\n  if (settings.lti_storage_params) {\n    // We have lti postMessage storage\n    try {\n      await storeCsrf(settings.state, settings.csrf_token, settings.lti_storage_params);\n      return submitToPlatform();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  if (window.self !== window.top) {\n    showLaunchNewWindow();\n    if (hasStorageAccessAPI()) {\n      // We have storage access API, which will work for Safari as long as the\n      // user already has used the application in the top layer and it set a cookie.\n      try {\n        let hasAccess = await document.hasStorageAccess();\n        if (!hasAccess) {\n          showRequestStorageAccess();\n          return;\n        }\n      } catch(e) {\n        console.log(e);\n      }\n    }\n  } else {\n    showCookieError();\n  }\n}\n", "import { doLtiStorageLaunch, tryRequestStorageAccess, launchNewWindow } from \"./lib/init\"\n\nwindow.onload = async () => {\n  doLtiStorageLaunch(window.SETTINGS);\n  window.LAUNCHED = true;\n  document.getElementById(\"request_storage_access_link\").\n    onclick = () => tryRequestStorageAccess(window.SETTINGS);\n  document.getElementById(\"button_launch_new_window\").\n    onclick = () => launchNewWindow(window.SETTINGS);\n}\n"],
  "mappings": "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",
  "names": ["showLaunchNewWindow", "showCookieError", "showRequestStorageAccess", "showRequestStorageError", "launchNewWindow", "settings", "storeCsrf", "state", "csrf_token", "storage_params", "resolve", "reject", "platformOrigin", "frameName", "parent", "targetFrame", "timeout", "receiveMessage", "event", "tryRequestStorageAccess", "setCookie", "e", "hasCookie", "settings", "setCookie", "hasStorageAccessAPI", "doLtiStorageLaunch", "submitToPlatform", "storeCsrf", "e", "showLaunchNewWindow", "showRequestStorageAccess", "showCookieError", "doLtiStorageLaunch", "tryRequestStorageAccess", "launchNewWindow"]
}
